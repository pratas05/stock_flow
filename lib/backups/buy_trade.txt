import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:stockflow/utils/colors_utils.dart';

class BuyTradePage extends StatefulWidget {
  @override
  _BuyTradePageState createState() => _BuyTradePageState();
}

class _BuyTradePageState extends State<BuyTradePage> with SingleTickerProviderStateMixin {
  late TabController _tabController;
  TextEditingController _searchController = TextEditingController();
  String searchQuery = "";
  String? storeNumber;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 2, vsync: this);
    _fetchStoreNumber();
  }

  @override
  void dispose() {
    _tabController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  Future<void> _fetchStoreNumber() async {
    try {
      final user = FirebaseAuth.instance.currentUser;
      if (user == null) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text("User not logged in.")),
        );
        return;
      }

      final userDoc =
          await FirebaseFirestore.instance.collection('users').doc(user.uid).get();
      setState(() {
        storeNumber = userDoc.data()?['storeNumber'];
      });
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("Error fetching store number: $e")),
      );
    }
  }

  @override
Widget build(BuildContext context) {
  return Scaffold(
    appBar: AppBar(
      title: Text(
        "Buy and Trade",
        style: TextStyle(color: Colors.white),
      ),
      centerTitle: true,
      backgroundColor: Colors.transparent,
      elevation: 0,
      flexibleSpace: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [
              hexStringToColor("CB2B93"),
              hexStringToColor("9546C4"),
              hexStringToColor("5E61F4"),
            ],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
      ),
bottom: TabBar(
  controller: _tabController,
  indicatorColor: Colors.white,
  labelColor: Colors.white, // Cor do texto das abas selecionadas
  unselectedLabelColor: Colors.white70, // Cor do texto das abas n√£o selecionadas (opcional)
  tabs: [
    Tab(text: "Buy"),
    Tab(text: "Trade"),
  ],
),

    ),
    body: Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [
            hexStringToColor("CB2B93"),
            hexStringToColor("9546C4"),
            hexStringToColor("5E61F4"),
          ],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
      ),
      child: TabBarView(
        controller: _tabController,
        children: [
          storeNumber == null ? _buildLoading() : _buildBuyTab(),
          _buildTradeTab(),
        ],
      ),
    ),
  );
}


  Widget _buildLoading() {
    return Center(
      child: CircularProgressIndicator(),
    );
  }

  Widget _buildBuyTab() {
    return Column(
      children: [
        Padding(
          padding: const EdgeInsets.all(8.0),
          child: TextField(
            controller: _searchController,
            decoration: InputDecoration(
              labelText: "Search",
              border: OutlineInputBorder(),
              prefixIcon: Icon(Icons.search),
            ),
            onChanged: (value) {
              setState(() {
                searchQuery = value;
              });
            },
          ),
        ),
        Expanded(
          child: StreamBuilder<QuerySnapshot>(
            stream: FirebaseFirestore.instance
                .collection('products')
                .where('storeNumber', isEqualTo: storeNumber)
                .snapshots(),
            builder: (context, snapshot) {
              if (!snapshot.hasData) {
                return Center(child: CircularProgressIndicator());
              }

              var filteredDocs = snapshot.data!.docs.where((doc) {
                var name = (doc['name'] as String).toLowerCase();
                return name.contains(searchQuery.toLowerCase());
              }).toList();

              if (filteredDocs.isEmpty) {
                return Center(child: Text("No products found."));
              }

                return ListView.builder(
                itemCount: filteredDocs.length,
                itemBuilder: (context, index) {
                  var doc = filteredDocs[index];
                  var name = doc['name'] as String;
                  var model = doc['model'] as String;
                  var price = doc['salePrice'] as double;
                  var stock = doc['stockCurrent'] as int;

                  return Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 8.0, vertical: 4.0),
                    child: Card(
                      color: Colors.white,
                      elevation: 4,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                      child: ListTile(
                        title: Text(
                          "$name - $model",
                          style: TextStyle(fontWeight: FontWeight.bold, color: Colors.black87),
                        ),
                        subtitle: Text(
                          "Price: \$${price.toStringAsFixed(2)} | Stock: $stock",
                          style: TextStyle(color: Colors.grey[700]),
                        ),
                        trailing: IconButton(
                          icon: Icon(Icons.add_shopping_cart, color: stock > 0 ? Colors.green : Colors.grey),
                          onPressed: stock > 0
                              ? () => _showBuyConfirmationDialog(doc.id, stock)
                              : null,
                        ),
                      ),
                    ),
                  );
                },
              );
            },
          ),
        ),
      ],
    );
  }

  Future<void> _showBuyConfirmationDialog(String productId, int stockCurrent) async {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text("Confirm Purchase"),
          content: Text("Are you sure you want to purchase this product?"),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: Text("Cancel"),
            ),
            ElevatedButton(
              onPressed: () async {
                Navigator.of(context).pop();
                await _buyProduct(productId, stockCurrent);
              },
              child: Text("Buy", style: TextStyle(fontWeight: FontWeight.bold)),
            ),
          ],
        );
      },
    );
  }

  Future<void> _buyProduct(String productId, int stockCurrent) async {
    try {
      await FirebaseFirestore.instance
          .collection('products')
          .doc(productId)
          .update({'stockCurrent': stockCurrent - 1});
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("Product purchased successfully!")),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("Error purchasing product: $e")),
      );
    }
  }

Widget _buildTradeTab() {
  return Column(
    children: [
      Padding(
        padding: const EdgeInsets.all(8.0),
        child: TextField(
          controller: _searchController,
          decoration: InputDecoration(
            labelText: "Search",
            border: OutlineInputBorder(),
            prefixIcon: Icon(Icons.search),
          ),
          onChanged: (value) {
            setState(() {
              searchQuery = value;
            });
          },
        ),
      ),
      Expanded(
        child: StreamBuilder<QuerySnapshot>(
          stream: FirebaseFirestore.instance
              .collection('products')
              .where('storeNumber', isEqualTo: storeNumber)
              .snapshots(),
          builder: (context, snapshot) {
            if (!snapshot.hasData) {
              return Center(child: CircularProgressIndicator());
            }

            var filteredDocs = snapshot.data!.docs.where((doc) {
              var name = (doc['name'] as String).toLowerCase();
              return name.contains(searchQuery.toLowerCase());
            }).toList();

            if (filteredDocs.isEmpty) {
              return Center(child: Text("No products found."));
            }

            return ListView.builder(
              itemCount: filteredDocs.length,
              itemBuilder: (context, index) {
                var doc = filteredDocs[index];
                var name = doc['name'] as String;
                var model = doc['model'] as String;
                var stock = doc['stockCurrent'] as int;
                var warehouseStock = doc['wareHouseStock'] as int;

                return Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 8.0, vertical: 4.0),
                  child: Card(
                    color: Colors.white,
                    elevation: 4,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: ListTile(
                      title: Text(
                        "$name - $model",
                        style: TextStyle(fontWeight: FontWeight.bold, color: Colors.black87),
                      ),
                      subtitle: Text(
                        "Stock: $stock | WareHouseStock: $warehouseStock",
                        style: TextStyle(color: Colors.grey[700]),
                      ),
                      trailing: Icon(Icons.swap_horiz, color: Colors.blue),
                      onTap: () {
                        // Removemos a verifica√ß√£o de estoque aqui
                        _showTradeOptions(doc.id, name, model, stock, warehouseStock);
                      },
                    ),
                  ),
                );
              },
            );
          },
        ),
      ),
    ],
  );
}

void _showTradeOptions(String productId, String productName, String productModel, int stockCurrent, int warehouseStock) {
  // Verifica se ambos os estoques est√£o a zero
  if (warehouseStock == 0 && stockCurrent == 0) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text("Este produto n√£o tem stock nem no armaz√©m nem em loja.")),
    );
    return; // Sai do m√©todo sem exibir o di√°logo de op√ß√µes
  }

  // Se pelo menos um dos estoques n√£o estiver a zero, exibe o di√°logo de op√ß√µes
  showDialog(
    context: context,
    builder: (BuildContext context) {
      return AlertDialog(
        title: Text("Trade Options"),
        content: Text("Select an action for $productName - $productModel."),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: Text("Cancel"),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.of(context).pop();
              _showProductSelection(productId, productName, productModel, stockCurrent, warehouseStock);
            },
            child: Text("Trade"),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.of(context).pop();
              _askStockTypeForBreak(productId, productName, productModel, stockCurrent, warehouseStock);
            },
            child: Text("Break"),
          ),
        ],
      );
    },
  );
}

void _askStockTypeForBreak(String productId, String productName, String productModel, int stockCurrent, int warehouseStock) {
  int quantity = 1; // Quantidade inicial
  bool isWarehouse = warehouseStock > 0; // Define o stock selecionado por padr√£o

  // Verifica se ambos os stocks est√£o a zero
  if (warehouseStock == 0 && stockCurrent == 0) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text("Este produto n√£o tem stock nem no armaz√©m nem em loja.")),
    );
    return; // Sai do m√©todo sem exibir o di√°logo
  }

  showDialog(
    context: context,
    builder: (BuildContext context) {
      return AlertDialog(
        title: Text("Break Product"),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text("Where was the product located?"),
            SizedBox(height: 10),
            // Sele√ß√£o de origem com c√≠rculos
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                // C√≠rculo para Warehouse Stock
                GestureDetector(
                  onTap: warehouseStock <= 0
                      ? null // Desabilita se o warehouseStock for <= 0
                      : () {
                          setState(() {
                            isWarehouse = true;
                          });
                          (context as Element).markNeedsBuild(); // Atualiza o estado do di√°logo
                        },
                  child: Container(
                    width: 50,
                    height: 50,
                    decoration: BoxDecoration(
                      shape: BoxShape.circle,
                      color: isWarehouse && warehouseStock > 0 ? Colors.blue : Colors.grey[300],
                      border: Border.all(
                        color: isWarehouse && warehouseStock > 0 ? Colors.blue : Colors.grey,
                        width: 2,
                      ),
                    ),
                    child: Center(
                      child: Text(
                        "W",
                        style: TextStyle(
                          color: isWarehouse && warehouseStock > 0 ? Colors.white : Colors.black,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                  ),
                ),
                // C√≠rculo para Shop Stock
                GestureDetector(
                  onTap: stockCurrent <= 0
                      ? null // Desabilita se o stockCurrent for <= 0
                      : () {
                          setState(() {
                            isWarehouse = false;
                          });
                          (context as Element).markNeedsBuild(); // Atualiza o estado do di√°logo
                        },
                  child: Container(
                    width: 50,
                    height: 50,
                    decoration: BoxDecoration(
                      shape: BoxShape.circle,
                      color: !isWarehouse && stockCurrent > 0 ? Colors.blue : Colors.grey[300],
                      border: Border.all(
                        color: !isWarehouse && stockCurrent > 0 ? Colors.blue : Colors.grey,
                        width: 2,
                      ),
                    ),
                    child: Center(
                      child: Text(
                        "S",
                        style: TextStyle(
                          color: !isWarehouse && stockCurrent > 0 ? Colors.white : Colors.black,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                  ),
                ),
              ],
            ),
            SizedBox(height: 20),
            Text("Select the quantity to break for $productName - $productModel."),
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                IconButton(
                  icon: Icon(Icons.remove),
                  onPressed: () {
                    if (quantity > 1) {
                      setState(() {
                        quantity--;
                      });
                      (context as Element).markNeedsBuild(); // Atualiza o estado do di√°logo
                    }
                  },
                ),
                Text('$quantity'),
                IconButton(
                  icon: Icon(Icons.add),
                  onPressed: () {
                    if (isWarehouse && quantity < warehouseStock) {
                      setState(() {
                        quantity++;
                      });
                      (context as Element).markNeedsBuild(); // Atualiza o estado do di√°logo
                    } else if (!isWarehouse && quantity < stockCurrent) {
                      setState(() {
                        quantity++;
                      });
                      (context as Element).markNeedsBuild(); // Atualiza o estado do di√°logo
                    }
                  },
                ),
              ],
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: Text("Cancel"),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.of(context).pop();
              _processBreak(productId, warehouseStock, stockCurrent, isWarehouse: isWarehouse, quantity: quantity);
            },
            child: Text("Confirm"),
          ),
        ],
      );
    },
  );
}

Future<void> _processBreak(String productId, int warehouseStock, int stockCurrent, {required bool isWarehouse, required int quantity}) async {
  try {
    if (isWarehouse) {
      // Se o produto estava no wareHouseStock, diminuir o wareHouseStock e adicionar ao stockBreak
      await FirebaseFirestore.instance.collection('products').doc(productId).update({
        'wareHouseStock': warehouseStock - quantity,
        'stockBreak': FieldValue.increment(quantity), // Adiciona a quantidade ao stockBreak
      });
    } else {
      // Se o produto estava no stockCurrent (loja), diminuir o stockCurrent e adicionar ao stockBreak
      await FirebaseFirestore.instance.collection('products').doc(productId).update({
        'stockCurrent': stockCurrent - quantity,
        'stockBreak': FieldValue.increment(quantity), // Adiciona a quantidade ao stockBreak
      });
    }

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text("Product break recorded successfully!")),
    );
  } catch (e) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text("Error recording product break: $e")),
    );
  }
}

void _showProductSelection(String selectedProductId, String selectedProductName, String selectedProductModel, int selectedStockCurrent, int selectedWarehouseStock) {
  showDialog(
    context: context,
    builder: (BuildContext context) {
      return AlertDialog(
        title: Text("Select Product for Trade"),
        content: StreamBuilder<QuerySnapshot>(
          stream: FirebaseFirestore.instance
              .collection('products')
              .where('storeNumber', isEqualTo: storeNumber)
              .snapshots(),
          builder: (context, snapshot) {
            if (!snapshot.hasData) {
              return Center(child: CircularProgressIndicator());
            }

            var products = snapshot.data!.docs;

            if (products.isEmpty) {
              return Text("No products available for trade.");
            }

            return Container(
              width: double.maxFinite,
              child: ListView.builder(
                shrinkWrap: true,
                itemCount: products.length,
                itemBuilder: (context, index) {
                  var doc = products[index];
                  var name = doc['name'] as String;
                  var model = doc['model'] as String;
                  var stockCurrent = doc['stockCurrent'] as int;

                  if (stockCurrent <= 0) {
                    // Excluir produtos sem estoque
                    return Container();
                  }

                  return ListTile(
                    title: Text("$name - $model"),
                    subtitle: Text("Stock in the shop: $stockCurrent"),
                    onTap: () {
                      // Verifica se o produto selecionado para troca √© o mesmo que o produto devolvido
                      if (doc.id == selectedProductId) {
                        // Exibe um erro se o usu√°rio tentar trocar o mesmo produto
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(content: Text("You cannot exchange the same product.")),
                        );
                      } else {
                        // Caso contr√°rio, continua com o processo de troca
                        Navigator.of(context).pop();
                        _confirmTrade(
                          selectedProductId,          // ID do produto a ser trocado (produto devolvido)
                          selectedWarehouseStock,      // Estoque no armaz√©m do produto a ser trocado
                          doc.id,                      // ID do produto para troca
                          name,                        // Nome do produto para troca
                          model,                       // Modelo do produto para troca
                          stockCurrent,                // Estoque atual do produto para troca (na loja)
                          selectedProductName,         // Nome do produto selecionado para diminuir estoque
                          selectedProductModel,        // Modelo do produto selecionado para diminuir estoque
                        );
                      }
                    },
                  );
                },
              ),
            );
          },
        ),
      );
    },
  );
}

  void _confirmTrade(
    String selectedProductId,            // Produto que ser√° devolvido
    int selectedWarehouseStock,          // Estoque no armaz√©m do produto que ser√° devolvido
    String tradeProductId,               // Produto escolhido para troca
    String tradeProductName,             // Nome do produto para troca
    String tradeProductModel,            // Modelo do produto para troca
    int tradeStockCurrent,               // Estoque atual do produto escolhido para troca (na loja)
    String selectedProductName,          // Nome do produto selecionado para diminuir estoque
    String selectedProductModel,         // Modelo do produto selecionado para diminuir estoque
  ) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text("Confirm Trade"),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Text("You are about to trade the following:"),
              SizedBox(height: 10),
              
              // Exibindo o produto devolvido, que aumentar√° o estoque no armaz√©m
              Text("Product to Increase Warehouse Stock:"),
              Text("$selectedProductName - $selectedProductModel", style: TextStyle(fontWeight: FontWeight.bold)),
              Text("Warehouse Stock: $selectedWarehouseStock"),  // Exibe o estoque do armaz√©m
              SizedBox(height: 10),
              Divider(),
              
              // Exibindo o produto para troca, que diminuir√° o estoque da loja
              Text("Product to Decrease Stock from the shop:"),
              Text("$tradeProductName - $tradeProductModel", style: TextStyle(fontWeight: FontWeight.bold)),
              Text("Stock in the shop: $tradeStockCurrent"), // Exibe o estoque atual da loja
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: Text("Cancel"),
            ),
            ElevatedButton(
              onPressed: () {
                Navigator.of(context).pop();

                // Atualizando a troca
                _processTrade(
                  selectedProductId,
                  selectedWarehouseStock,
                  tradeProductId,
                  tradeStockCurrent,
                );
              },
              child: Text("Confirm"),
            ),
          ],
        );
      },
    );
  }

  Future<void> _processTrade(
    String selectedProductId,          // Produto que ser√° devolvido
    int selectedWarehouseStock,        // Estoque no armaz√©m do produto devolvido
    String tradeProductId,             // Produto escolhido para troca
    int tradeStockCurrent,             // Estoque atual do produto para troca
  ) async {
    try {
      // Atualizando o estoque do produto devolvido (aumenta o estoque do armaz√©m)
      await FirebaseFirestore.instance.collection('products').doc(selectedProductId).update({
        'wareHouseStock': selectedWarehouseStock + 1,  // Aumenta o estoque no armaz√©m do produto devolvido
      });

      // Atualizando o estoque do produto para troca (diminui o estoque da loja)
      await FirebaseFirestore.instance.collection('products').doc(tradeProductId).update({
        'stockCurrent': tradeStockCurrent - 1,  // Diminui o estoque da loja para o produto trocado
      });

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("Trade completed successfully!")),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("Error during trade: $e")),
      );
    }
  }
}