import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:stockflow/reusable_widgets/colors_utils.dart';
import 'package:stockflow/reusable_widgets/encryption_service.dart';
import 'package:stockflow/reusable_widgets/error_screen.dart';

class ChatPage extends StatefulWidget {
  const ChatPage({super.key});

  @override
  State<ChatPage> createState() => _ChatPageState();
}

class _ChatPageState extends State<ChatPage> {
  final TextEditingController _messageController = TextEditingController();
  String? storeNumber;
  bool isLoading = true;
  bool hasStoreAccess = false;

  @override
  void initState() {
    super.initState();
    _checkStoreAccess();
  }

  Future<void> _checkStoreAccess() async {
    final user = FirebaseAuth.instance.currentUser;
    if (user != null) {
      try {
        final userDoc = await FirebaseFirestore.instance
            .collection('users')
            .doc(user.uid)
            .get();
        if (userDoc.exists) {
          setState(() {
            storeNumber = userDoc['storeNumber'];
            isLoading = false;
            hasStoreAccess = storeNumber != null && storeNumber!.isNotEmpty;
          });
          if (hasStoreAccess) {
            _cleanupOldMessages();
          }
        } else {
          setState(() {
            isLoading = false;
            hasStoreAccess = false;
          });
        }
      } catch (e) {
        setState(() {
          isLoading = false;
          hasStoreAccess = false;
        });
      }
    } else {
      setState(() {
        isLoading = false;
        hasStoreAccess = false;
      });
    }
  }

  Future<void> _cleanupOldMessages() async {
    try {
      final oneDayAgo = DateTime.now().subtract(const Duration(days: 1));
      final querySnapshot = await FirebaseFirestore.instance
          .collection('messages')
          .where('createdAt', isLessThan: Timestamp.fromDate(oneDayAgo))
          .get();

      for (var doc in querySnapshot.docs) {await doc.reference.delete();}
    } catch (e) {
      debugPrint('Error cleaning up old messages: $e');
    }
  }

  void _sendMessage() async {
    final plainText = _messageController.text.trim();
    if (plainText.isEmpty || storeNumber == null) return;

    try {
      final encryptedText = EncryptionHelper.encryptText(plainText);

      await FirebaseFirestore.instance.collection('messages').add({
        'text': encryptedText,
        'storeNumber': storeNumber,
        'createdAt': FieldValue.serverTimestamp(),
        'userId': FirebaseAuth.instance.currentUser?.uid,
      });
      _messageController.clear();
    } catch (e) {
      debugPrint('Error sending message: $e');
      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Failed to send message')));
    }
  }

  Stream<QuerySnapshot> _chatStream() {
    if (storeNumber == null) {return const Stream.empty();}
    return FirebaseFirestore.instance
        .collection('messages')
        .where('storeNumber', isEqualTo: storeNumber)
        .orderBy('createdAt', descending: true)
        .snapshots();
  }

  @override
  Widget build(BuildContext context) {
    if (!hasStoreAccess) {
      return const ErrorScreen(
        icon: Icons.warning_amber_rounded,
        title: "Store Access Required",
        message: "Your account is not associated with any store. Please contact admin.",
      );
    }

    return Scaffold(
      extendBodyBehindAppBar: true,
      appBar: AppBar(
        title: const Text('Store Chat', style: TextStyle(color: Colors.white)),
        backgroundColor: Colors.transparent, elevation: 0,
        iconTheme: const IconThemeData(color: Colors.white),
      ),
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [
              hexStringToColor("CB2B93"),
              hexStringToColor("9546C4"),
              hexStringToColor("5E61F4"),
            ],
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
          ),
        ),
        child: Column(
          children: [
            Expanded(
              child: StreamBuilder<QuerySnapshot>(
                stream: _chatStream(),
                builder: (context, snapshot) {
                  if (snapshot.connectionState == ConnectionState.waiting) {
                    return const Center(child: CircularProgressIndicator());
                  }
                  if (snapshot.hasError) {
                    if (snapshot.error.toString().contains('failed-precondition')) {
                      return const Center(
                        child: Padding(
                          padding: EdgeInsets.all(16.0),
                          child: Text(
                            'A required index is missing. Please try again later.',
                            textAlign: TextAlign.center,
                            style: TextStyle(color: Colors.white),
                          ),
                        ),
                      );
                    }
                    return const Center(
                      child: Text(
                        'Error loading messages.',
                        style: TextStyle(color: Colors.white),
                      ),
                    );
                  }
                  if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {
                    return const Center(
                      child: Text(
                        'No messages yet.',
                        style: TextStyle(color: Colors.white),
                      ),
                    );
                  }

                  final docs = snapshot.data!.docs;
                  return ListView.builder(
                    reverse: true,
                    itemCount: docs.length,
                    itemBuilder: (context, index) {
                      final data = docs[index].data() as Map<String, dynamic>;
                      final userId = data['userId'];
                      final isCurrentUser = userId == FirebaseAuth.instance.currentUser?.uid;

                      return FutureBuilder<DocumentSnapshot>(
                        future: FirebaseFirestore.instance.collection('users').doc(userId).get(),
                        builder: (context, userSnapshot) {
                          if (userSnapshot.connectionState == ConnectionState.waiting) {
                            return const Padding(
                              padding: EdgeInsets.all(8.0),
                              child: Text(
                                'Loading...', style: TextStyle(color: Colors.white),
                              ),
                            );
                          }

                          final userData = userSnapshot.data?.data() as Map<String, dynamic>?;
                          final userName = userData?['name'] ?? 'Unknown User';

                          // Descriptografa a mensagem
                          final encryptedMessage = data['text'] ?? '';
                          String decryptedMessage = '';
                          try {
                            decryptedMessage = EncryptionHelper.decryptText(encryptedMessage);
                          } catch (e) {decryptedMessage = '[Erro ao descriptografar mensagem]';}

                          return Align(
                            alignment: isCurrentUser ? Alignment.centerRight : Alignment.centerLeft,
                            child: Padding(
                              padding: const EdgeInsets.symmetric(
                                horizontal: 8.0,
                                vertical: 4.0,
                              ),
                              child: Column(
                                crossAxisAlignment: isCurrentUser
                                    ? CrossAxisAlignment.end
                                    : CrossAxisAlignment.start,
                                children: [
                                  Text(
                                    userName,
                                    style: const TextStyle(
                                      fontSize: 12, fontWeight: FontWeight.bold,
                                      color: Colors.white,
                                    ),
                                  ),
                                  const SizedBox(height: 4),
                                  Container(
                                    padding: const EdgeInsets.all(12.0),
                                    decoration: BoxDecoration(
                                      color: isCurrentUser
                                          ? Colors.blueAccent.withOpacity(0.8)
                                          : Colors.grey.withOpacity(0.8),
                                      borderRadius: BorderRadius.only(
                                        topLeft: const Radius.circular(12),
                                        topRight: const Radius.circular(12),
                                        bottomLeft: isCurrentUser
                                            ? const Radius.circular(12)
                                            : const Radius.circular(0),
                                        bottomRight: isCurrentUser
                                            ? const Radius.circular(0)
                                            : const Radius.circular(12),
                                      ),
                                    ),
                                    child: Text(
                                      decryptedMessage,
                                      style: const TextStyle(fontSize: 14, color: Colors.white),
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          );
                        },
                      );
                    },
                  );
                },
              ),
            ),
            Padding(
              padding: const EdgeInsets.symmetric(
                horizontal: 8.0,
                vertical: 16.0,
              ),
              child: Row(
                children: [
                  Expanded(
                    child: TextField(
                      controller: _messageController,
                      style: const TextStyle(color: Colors.white),
                      decoration: InputDecoration(
                        hintText: 'Type a message...',
                        hintStyle: const TextStyle(color: Colors.white),
                        filled: true,
                        fillColor: Colors.transparent,
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(12),
                          borderSide: BorderSide.none,
                        ),
                      ),
                      onSubmitted: (value) {
                        if (value.trim().isNotEmpty) {
                          _sendMessage();
                        }
                      },
                    ),
                  ),
                  const SizedBox(width: 8),
                  IconButton(
                    icon: const Icon(Icons.send, color: Colors.white),
                    onPressed: _sendMessage,
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}