// Adicionar stockBreak, com valor 0 quando um produto é criado 
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/services.dart';
import 'package:flutter/foundation.dart';
import 'package:stockflow/utils/colors_utils.dart';

class ProductDatabasePage extends StatefulWidget {
  const ProductDatabasePage({Key? key}) : super(key: key);

  @override
  _ProductDatabasePageState createState() => _ProductDatabasePageState();
}

class _ProductDatabasePageState extends State<ProductDatabasePage> with SingleTickerProviderStateMixin {
  late TabController _tabController;

  // Controllers for product registration
  final _nameController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _categoryController = TextEditingController();
  final _subCategoryController = TextEditingController();
  final _brandController = TextEditingController();
  final _modelController = TextEditingController();
  final _stockMaxController = TextEditingController();
  final _wareHouseStockController = TextEditingController(text: "0");
  final _stockCurrentController = TextEditingController(text: "0");
  final _stockOrderController = TextEditingController();
  final _stockMinController = TextEditingController();
  final _stockBreakController = TextEditingController(text: "0");
  final _lastPurchasePriceController = TextEditingController();
  final _salePriceController = TextEditingController(text: "0");
  final _vatCodeController = TextEditingController();

  // Controller for search functionality
  final _searchController = TextEditingController();
  String _searchText = "";

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 2, vsync: this);

    // Listen to changes in search text to filter products in real-time
    _searchController.addListener(() {
      setState(() {
        _searchText = _searchController.text;
      });
    });
  }

  @override
  void dispose() {
    _tabController.dispose();
    _searchController.dispose();
    super.dispose();
  }


Future<void> _saveProduct() async {
  // Validações iniciais
  if (_nameController.text.isEmpty) {
    _showSnackBar("Product name is required");
    return;
  }

  int stockMax = int.tryParse(_stockMaxController.text) ?? 0;
  int stockMin = int.tryParse(_stockMinController.text) ?? 0;
  int stockOrder = int.tryParse(_stockOrderController.text) ?? 0;

  if (stockMin >= stockMax) return _showSnackBar("Stock Min must be less than Stock Max");
  if (stockOrder > stockMax) return _showSnackBar("You cannot order more stock than your warehouse is capable of");

  try {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) return _showSnackBar("No user is logged in.");

    final userDoc = await FirebaseFirestore.instance.collection('users').doc(user.uid).get();
    final storeNumber = userDoc.data()?['storeNumber'];
    if (storeNumber == null) return _showSnackBar("Store information is missing for the user.");

    // Adicionar o produto ao Firestore
    final productRef = await FirebaseFirestore.instance.collection('products').add({
      'name': _nameController.text,
      'description': _descriptionController.text,
      'category': _categoryController.text,
      'subCategory': _subCategoryController.text,
      'brand': _brandController.text,
      'model': _modelController.text,
      'stockMax': stockMax,
      'stockCurrent': int.tryParse(_stockCurrentController.text) ?? 0,
      'stockOrder': stockOrder,
      'stockMin': stockMin,
      'wareHouseStock': int.tryParse(_wareHouseStockController.text) ?? 0,
      'stockBreak': 0, // Adicionando o campo stockBreak com valor 0
      'lastPurchasePrice': double.tryParse(_lastPurchasePriceController.text) ?? 0.0,
      'salePrice': double.tryParse(_salePriceController.text) ?? 0.0,
      'vatCode': _vatCodeController.text,
      'storeNumber': storeNumber,
      'createdAt': Timestamp.now(),
    });

    // Criar a notificação
    await FirebaseFirestore.instance.collection('notifications').add({
      'message': "A new product was created: ${_brandController.text} - ${_nameController.text} - ${_modelController.text}.",
      'notificationId': FirebaseFirestore.instance.collection('notifications').doc().id,
      'notificationType': "Create",
      'productId': productRef.id,
      'storeNumber': storeNumber,
      'timestamp': Timestamp.now(),
      'userId': user.uid,
    });

    _showSnackBar("Product saved successfully!");
    _clearFields();
  } catch (e) {
    print("Error saving product: $e");
    _showSnackBar("Error saving product.");
  }
}

// Método auxiliar para exibir mensagens com SnackBar
void _showSnackBar(String message) {
  ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text(message)));
}

void _clearFields() {
  _nameController.clear();
  _descriptionController.clear();
  _categoryController.clear();
  _subCategoryController.clear();
  _brandController.clear();
  _modelController.clear();
  _stockMaxController.clear();
  _stockOrderController.clear();
  _stockMinController.clear();
  _stockBreakController.clear();
  _lastPurchasePriceController.clear();
  _vatCodeController.clear();
}

Widget build(BuildContext context) {
  return Scaffold(
    appBar: AppBar(
      title: 
        Text("Products Management",
        style: TextStyle(color: Colors.white)
      ),
      backgroundColor: Colors.transparent,
      elevation: 0,
      flexibleSpace: _buildGradientContainer(),
      bottom: TabBar(
        controller: _tabController,
        tabs: _buildTabs(),
      ),
    ),
    body: _buildGradientContainer(
      child: TabBarView(
        controller: _tabController,
        children: [
          _buildProductForm(),
          _buildProductList(),
        ],
      ),
    ),
  );
}

// Widget auxiliar para criar o gradiente
Widget _buildGradientContainer({Widget? child}) {
  return Container(
    decoration: BoxDecoration(
      gradient: LinearGradient(
        colors: [
          hexStringToColor("CB2B93"),
          hexStringToColor("9546C4"),
          hexStringToColor("5E61F4"),
        ],
        begin: Alignment.topLeft,
        end: Alignment.bottomRight,
      ),
    ),
    child: child,
  );
}

// Widget auxiliar para criar as tabs
List<Widget> _buildTabs() {
  return [
    Tab(
      child: Padding(
        padding: EdgeInsets.symmetric(vertical: 5),
        child: Text("Register Products", style: TextStyle(color: Colors.white)),
      ),
    ),
    Tab(
      child: Padding(
        padding: EdgeInsets.symmetric(vertical: 5),
        child: Text("Edit & Search Products", style: TextStyle(color: Colors.white)),
      ),
    ),
  ];
}

Widget _buildProductForm({bool isEditing = false}) {
  return SingleChildScrollView(
    padding: EdgeInsets.all(16.0),
    child: Column(
      children: [
        ..._buildProductFields(),
        SizedBox(height: 20),
        Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            if (!isEditing)
              _buildButton("Save Product", _saveProduct, width: 140),
            _buildButton("Clear Fields", _clearFields, color: Colors.red),
          ],
        ),
      ],
    ),
  );
}

List<String> vatOptions = ['VAT1', 'VAT2', 'VAT3', 'VAT4'];

// Função para construir os campos de texto
List<Widget> _buildProductFields() {
  return [
    _buildTextField(_nameController, "Product Name"),
    _buildTextField(_descriptionController, "Description", maxLength: 300),
    _buildTextField(_categoryController, "Category"),
    _buildTextField(_subCategoryController, "Subcategory"),
    _buildTextField(_brandController, "Brand"),
    _buildTextField(_modelController, "Model"),
    _buildTextField(_stockMaxController, "Max Stock", isNumber: true),
    _buildTextField(_stockMinController, "Min Stock", isNumber: true),

    // Campo fixo para WareHouse Stock
    Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: SizedBox(
        width: 1000,
        child: TextFormField(
          controller: TextEditingController(text: "0"),
          readOnly: true,
          decoration: InputDecoration(
            labelText: 'WareHouse Stock',
            labelStyle: TextStyle(color: Colors.black),
            filled: true,
            fillColor: Colors.grey[300],
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(5.0),
              borderSide: BorderSide(color: Colors.black),
            ),
          ),
        ),
      ),
    ),

    // Campo fixo para Current Stock
    Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: SizedBox(
        width: 1000,
        child: TextFormField(
          controller: TextEditingController(text: "0"),
          readOnly: true,
          decoration: InputDecoration(
            labelText: 'Current Stock',
            labelStyle: TextStyle(color: Colors.black),
            filled: true,
            fillColor: Colors.grey[300],
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(5.0),
              borderSide: BorderSide(color: Colors.black),
            ),
          ),
        ),
      ),
    ),

    // Campo fixo para Stock Break
    Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: SizedBox(
        width: 1000,
        child: TextFormField(
          controller: TextEditingController(text: "0"),
          readOnly: true,
          decoration: InputDecoration(
            labelText: 'Stock Break',
            labelStyle: TextStyle(color: Colors.black),
            filled: true,
            fillColor: Colors.grey[300],
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(5.0),
              borderSide: BorderSide(color: Colors.black),
            ),
          ),
        ),
      ),
    ),

    _buildTextField(_stockOrderController, "Order Stock", isNumber: true),
    _buildTextField(_lastPurchasePriceController, "Last Purchase Price", isNumber: true),
    _buildTextField(_salePriceController, "Sale Price", isNumber: true),
    _buildTextField(_vatCodeController, "VAT Code", isNumber: true),
  ];
}

// Função para criar botões com estilo uniforme
Widget _buildButton(String label, VoidCallback onPressed, {Color? color, double? width}) {
  return Container(
    width: width,
    child: ElevatedButton(
      onPressed: onPressed,
      style: ElevatedButton.styleFrom(
        foregroundColor: color, // Personalização de cor (opcional)
      ),
      child: Text(label),
    ),
  );
}
Widget _buildTextField(TextEditingController controller, String label,
    {bool isNumber = false, int maxLength = 0}) {
  return Padding(
    padding: const EdgeInsets.symmetric(vertical: 8.0),
    child: SizedBox(
      width: 1000,
      child: TextFormField(
        controller: controller,
        keyboardType: isNumber
            ? TextInputType.numberWithOptions(decimal: true)
            : TextInputType.text,
        maxLength: maxLength > 0 ? maxLength : null,
        inputFormatters: _getInputFormatters(label),
        decoration: _getInputDecoration(label),
        onChanged: (value) {
          if (controller.text.isEmpty &&
              ["Sale Price", "Current Stock", "WareHouse Stock"].contains(label)) {
            controller.text = "0";
            controller.selection =
                TextSelection.collapsed(offset: controller.text.length);
          }
        },
      ),
    ),
  );
}

// Define os input formatters com base no rótulo
List<TextInputFormatter> _getInputFormatters(String label) {
  final filters = {
    "Product Name": '[.,a-zA-Z0-9 ]',
    "Model": '[.,a-zA-Z0-9 ]',
    "Description": '[.,a-zA-Z0-9 ]',
    "Brand": '[a-zA-Z ]',
    "Category": '[a-zA-Z ]',
    "Subcategory": '[a-zA-Z ]',
    "Max Stock": '[0-9]',
    "Order Stock": '[0-9]',
    "Min Stock": '[0-9]',
    "Last Purchase Price": '[0-9]',
    "VAT Code": '[%0-9 ]',
  };
  return filters.containsKey(label)
      ? [FilteringTextInputFormatter.allow(RegExp(filters[label]!))]
      : [];
}

// Cria a decoração do TextFormField
InputDecoration _getInputDecoration(String label) {
  return InputDecoration(
    labelText: label,
    fillColor: Colors.grey[100],
    filled: true,
    border: OutlineInputBorder(),
    labelStyle: TextStyle(color: Colors.black),
    hintStyle: TextStyle(color: Colors.grey),
    counterText: label == "Description" ? null : '',
    counterStyle: TextStyle(color: Colors.white),
  );
}

Widget _buildProductList() {
  return Column(
    children: [
      _buildSearchBar(),
      Expanded(
        child: FutureBuilder<DocumentSnapshot>(
          future: FirebaseFirestore.instance
              .collection('users')
              .doc(FirebaseAuth.instance.currentUser?.uid)
              .get(),
          builder: (context, userSnapshot) {
            if (!userSnapshot.hasData) {
              return Center(child: CircularProgressIndicator());
            }

            final storeNumber = userSnapshot.data?['storeNumber'];
            if (storeNumber == null) {
              return Center(child: Text("Store information not available."));
            }

            return StreamBuilder<QuerySnapshot>(
              stream: FirebaseFirestore.instance
                  .collection('products')
                  .where('storeNumber', isEqualTo: storeNumber)
                  .snapshots(),
              builder: (context, productSnapshot) {
                if (!productSnapshot.hasData) {
                  return Center(child: CircularProgressIndicator());
                }

                var filteredProducts = productSnapshot.data!.docs.where((product) =>
                    product['name'].toString().toLowerCase().contains(_searchText.toLowerCase())).toList();

                return filteredProducts.isEmpty
                    ? Center(child: Text("No products found"))
                    : ListView.builder(
                        itemCount: filteredProducts.length,
                        itemBuilder: (context, index) =>
                            _buildProductCard(filteredProducts[index]),
                      );
              },
            );
          },
        ),
      ),
    ],
  );
}

Widget _buildSearchBar() {
  return Padding(
    padding: const EdgeInsets.all(16.0),
    child: Center(
      child: SizedBox(
        width: MediaQuery.of(context).size.width * 0.7,
        child: TextField(
          controller: _searchController,
          decoration: InputDecoration(
            labelText: "Search Product",
            hintText: "Enter product name",
            prefixIcon: Icon(Icons.search),
            border: OutlineInputBorder(borderRadius: BorderRadius.circular(8.0)),
          ),
        ),
      ),
    ),
  );
}

Widget _buildProductCard(QueryDocumentSnapshot product) {
  return Center(
    child: SizedBox(
      width: MediaQuery.of(context).size.width * 0.6,
      child: Card(
        margin: EdgeInsets.symmetric(vertical: 8.0, horizontal: 16.0),
        elevation: 4.0,
        child: ListTile(
          contentPadding: EdgeInsets.all(16.0),
          title: Text(
            product['name'],
            style: TextStyle(fontWeight: FontWeight.bold, fontSize: 18),
          ),
          subtitle: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text('Brand: ${product['brand']}'),
              Text('Sale Price: €${product['salePrice']}'),
            ],
          ),
          trailing: _buildProductActions(product),
          onTap: () => _showProductDetailsDialog(context, product),
        ),
      ),
    ),
  );
}

Widget _buildProductActions(QueryDocumentSnapshot product) {
  return Row(
    mainAxisSize: MainAxisSize.min,
    children: [
      IconButton(
        icon: Icon(Icons.edit),
        onPressed: () => _editProduct(product),
      ),
      IconButton(
        icon: Icon(Icons.delete),
        onPressed: () async {
          if (await _showDeleteConfirmationDialog(context)) {
            FirebaseFirestore.instance.collection('products').doc(product.id).delete();
          }
        },
      ),
    ],
  );
}

Future<void> _showProductDetailsDialog(BuildContext context, DocumentSnapshot product) async {
  showDialog(
    context: context,
    builder: (context) => AlertDialog(
      title: Text("Product Details"),
      content: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: _buildProductDetailsList(product),
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: Text("Close"),
        ),
      ],
    ),
  );
}

List<Widget> _buildProductDetailsList(DocumentSnapshot product) {
  final details = {
    "Name": product['name'],
    "Description": product['description'],
    "Category": product['category'],
    "Subcategory": product['subCategory'],
    "Brand": product['brand'],
    "Model": product['model'],
    "Max Stock": product['stockMax'].toString(),
    "WareHouse Stock": product['wareHouseStock'].toString(),
    "Current Stock": product['stockCurrent'].toString(),
    "Order Stock": product['stockOrder'].toString(),
    "Min Stock": product['stockMin'].toString(),
    "Stock Break": product['stockBreak'].toString(), 
    "Sale Price": "€${product['salePrice']}",
    "Last Purchase Price": "€${product['lastPurchasePrice']}",
    "VAT Code": product['vatCode'],
  };

  return details.entries.map((entry) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 8.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text("${entry.key}: ", style: TextStyle(fontWeight: FontWeight.bold)),
          Text(entry.value),
        ],
      ),
    );
  }).toList();
}

Future<bool> _showDeleteConfirmationDialog(BuildContext context) async {
  return (await showDialog<bool>(
        context: context,
        barrierDismissible: false,
        builder: (context) => AlertDialog(
          title: Text("Confirm Deletion"),
          content: Text("Are you sure you want to delete this product?"),
          actions: _buildDeleteDialogActions(context),
        ),
      )) ??
      false;
}

List<Widget> _buildDeleteDialogActions(BuildContext context) {
  return [
    TextButton(
      onPressed: () => Navigator.of(context).pop(false),
      child: Text("No"),
    ),
    TextButton(
      onPressed: () => Navigator.of(context).pop(true),
      child: Text("Yes", style: TextStyle(fontWeight: FontWeight.bold)),
    ),
  ];
}

Future<void> _editProduct(DocumentSnapshot product) async {
  // Preenche os campos do formulário com os dados do produto
  _populateFormFields(product);

  await showDialog(
    context: context,
    builder: (_) => AlertDialog(
      title: Text("Edit Product"),
      content: SingleChildScrollView(child: _buildProductForm(isEditing: true)),
      actions: _buildEditDialogActions(product),
    ),
  );
}

void _populateFormFields(DocumentSnapshot product) {
  final fields = {
    _nameController: product['name'],
    _descriptionController: product['description'],
    _categoryController: product['category'],
    _subCategoryController: product['subCategory'],
    _brandController: product['brand'],
    _modelController: product['model'],
    _stockMaxController: product['stockMax'].toString(),
    _stockCurrentController: product['stockCurrent'].toString(),
    _stockOrderController: product['stockOrder'].toString(),
    _stockMinController: product['stockMin'].toString(),
    _stockBreakController: product['stockBreak'].toString(), 
    _lastPurchasePriceController: product['lastPurchasePrice'].toString(),
    _salePriceController: product['salePrice'].toString(),
    _vatCodeController: product['vatCode']
  };

  fields.forEach((controller, value) => controller.text = value);
}

  List<Widget> _buildEditDialogActions(DocumentSnapshot product) {
    return [
      TextButton(
        onPressed: () => Navigator.of(context).pop(),
        child: Text("Cancel"),
      ),
      TextButton(
        onPressed: () async {
          await _updateProductInFirestore(product.id, product);
          if (!mounted) return;
          ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text("Product updated successfully!")));
          Navigator.of(context).pop();
          _clearFields();
        },
        child: Text("Save", style: TextStyle(fontWeight: FontWeight.bold)),
      ),
    ];
  }

    Future<void> _updateProductInFirestore(String productId, DocumentSnapshot product) async {
  final oldData = {
    'name': product['name'],
    'description': product['description'],
    'category': product['category'],
    'subCategory': product['subCategory'],
    'brand': product['brand'],
    'model': product['model'],
    'stockMax': product['stockMax'],
    'stockCurrent': product['stockCurrent'],
    'stockOrder': product['stockOrder'],
    'stockMin': product['stockMin'],
    'stockBreak': product['stockBreak'], // Adicionando o campo stockBreak
    'lastPurchasePrice': product['lastPurchasePrice'],
    'salePrice': product['salePrice'],
    'vatCode': product['vatCode'],
  };

  // Atualizar o produto com os novos dados
  await FirebaseFirestore.instance.collection('products').doc(productId).update({
    'name': _nameController.text,
    'description': _descriptionController.text,
    'category': _categoryController.text,
    'subCategory': _subCategoryController.text,
    'brand': _brandController.text,
    'model': _modelController.text,
    'stockMax': int.tryParse(_stockMaxController.text) ?? 0,
    'stockCurrent': int.tryParse(_stockCurrentController.text) ?? 0,
    'stockOrder': int.tryParse(_stockOrderController.text) ?? 0,
    'stockMin': int.tryParse(_stockMinController.text) ?? 0,
    'stockBreak': int.tryParse(_stockBreakController.text) ?? 0, // Adicionando o campo stockBreak
    'lastPurchasePrice': double.tryParse(_lastPurchasePriceController.text) ?? 0.0,
    'salePrice': double.tryParse(_salePriceController.text) ?? 0.0,
    'vatCode': _vatCodeController.text,
  });

  // Gerar e enviar a notificação para cada campo alterado
  await _sendFieldChangeNotifications(oldData, productId);
}

    Future<void> _sendFieldChangeNotifications(Map<String, dynamic> oldData, String productId) async {
      final user = FirebaseAuth.instance.currentUser;
      if (user == null) return;

      final userDoc = await FirebaseFirestore.instance.collection('users').doc(user.uid).get();
      final storeNumber = userDoc.data()?['storeNumber'];
      if (storeNumber == null) return;

      // Buscar o nome do produto no Firestore usando o productId
      final productSnapshot = await FirebaseFirestore.instance.collection('products').doc(productId).get();
      String productName = 'Unknown Product'; // Default caso o produto não seja encontrado

      if (productSnapshot.exists) {
        productName = productSnapshot['name'] ?? 'Unknown Product';
      }

      final updatedData = {
        'name': _nameController.text,
        'description': _descriptionController.text,
        'category': _categoryController.text,
        'subCategory': _subCategoryController.text,
        'brand': _brandController.text,
        'model': _modelController.text,
        'stockMax': int.tryParse(_stockMaxController.text) ?? 0,
        'stockCurrent': int.tryParse(_stockCurrentController.text) ?? 0,
        'stockOrder': int.tryParse(_stockOrderController.text) ?? 0,
        'stockMin': int.tryParse(_stockMinController.text) ?? 0,
        'lastPurchasePrice': double.tryParse(_lastPurchasePriceController.text) ?? 0.0,
        'salePrice': double.tryParse(_salePriceController.text) ?? 0.0,
        'vatCode': _vatCodeController.text,
      };

      // Verificar quais campos foram alterados
      final changes = <String>[];
      updatedData.forEach((key, newValue) {
        final oldValue = oldData[key];
        if (oldValue != newValue) {
          changes.add('$key: "$oldValue" → "$newValue"');
        }
      });

      if (changes.isEmpty) return;

      // Criando a mensagem com o nome do produto seguido dos campos alterados
      final message = "Product - $productName. The following fields were updated: ${changes.join(', ')}.";

      // Adicionar notificação no Firestore
      final notificationRef = FirebaseFirestore.instance.collection('notifications').doc();
      final notificationId = notificationRef.id;  // Obtém o ID gerado para o documento de notificação
      await notificationRef.set({
        'message': message,
        'notificationId': notificationId,
        'notificationType': "Edit",
        'productId': productId,
        'storeNumber': storeNumber,
        'timestamp': Timestamp.now(),
        'userId': user.uid,
      });
    }
}

// Falta adicionar notificação quando se apaga um produto