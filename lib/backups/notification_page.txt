import 'dart:ui';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:intl/intl.dart';
import 'package:stockflow/utils/colors_utils.dart';
import 'package:timeago/timeago.dart' as timeago;

class NotificationsStockAlert extends StatelessWidget {
  const NotificationsStockAlert({super.key});

  bool _isNotificationExpired(Timestamp timestamp) { // Função para verificar se a notificação tem mais de 3 dias
    final notificationTime = timestamp.toDate();
    final currentTime = DateTime.now();
    final difference = currentTime.difference(notificationTime);

    return difference.inDays > 3; // Se a notificação tem mais de 3 dias
  }

  String _formatTimeElapsed(DateTime dateTime) { // Função para formatar o tempo decorrido
    return timeago.format(dateTime, locale: 'en');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: PreferredSize(
        preferredSize: Size.fromHeight(80.0), // Ajuste a altura do AppBar
        child: AppBar(
          backgroundColor: Color.fromRGBO(185, 30, 145, 800),
          flexibleSpace: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              const Text(
                'Notifications',
                style: TextStyle(
                  fontSize: 18, fontWeight: FontWeight.bold,
                ),
              ),
              IconButton( // Botão de criação de notificações personalizado
                icon: const Icon(Icons.add_alert),
                onPressed: () {
                  _showSendNotificationModal(context);
                }, iconSize: 25.0,
              ),
            ],
          ),
        ),
      ),
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [
              hexStringToColor("CB2B93"),
              hexStringToColor("9546C4"),
              hexStringToColor("5E61F4"),
            ],
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
          ),
        ),
        child: FutureBuilder<String?>(
          future: _getUserStoreNumber(),
          builder: (context, snapshot) {
            if (snapshot.connectionState == ConnectionState.waiting) {
              return const Center(child: CircularProgressIndicator());
            }

            if (snapshot.hasError || !snapshot.hasData || snapshot.data == null) {
              return const Center(
                child: Text(
                  'Erro ao buscar o número da loja.', style: TextStyle(fontSize: 18, color: Colors.white),
                ),
              );
            }

            final storeNumber = snapshot.data!;
            _deleteExpiredNotifications(storeNumber); // Exclui notificações expiradas ao carregar a página

            return StreamBuilder<QuerySnapshot>(
              stream: FirebaseFirestore.instance
                  .collection('notifications')
                  .where('storeNumber', isEqualTo: storeNumber)
                  .orderBy('timestamp', descending: true)
                  .snapshots(),
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return const Center(child: CircularProgressIndicator());
                }

                if (snapshot.hasError) {
                  return const Center(
                    child: Text(
                      'Erro ao buscar as notificações.',
                      style: TextStyle(fontSize: 18, color: Colors.white),
                    ),
                  );
                }

                final notifications = snapshot.data?.docs ?? [];

                final validNotifications = notifications.where((doc) { // Filtra notificações expiradas
                  final timestamp = doc['timestamp'] as Timestamp?;
                  if (timestamp == null) return false;
                  return !_isNotificationExpired(timestamp);
                }).toList();

                if (validNotifications.isEmpty) {
                  return const Center(
                    child: Text(
                      'Nenhuma notificação disponível.',
                      style: TextStyle(fontSize: 18, color: Colors.white),
                    ),
                  );
                }

                return ListView(
                  children: _groupNotificationsByDay(validNotifications).entries.map((entry) {
                    final dayLabel = entry.key;
                    final notificationsForDay = entry.value;

                    return Column(
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        // Cabeçalho centralizado e estilizado
                        Center(
                          child: Container(
                            margin: const EdgeInsets.symmetric(vertical: 10.0),
                            padding: const EdgeInsets.symmetric(vertical: 8.0, horizontal: 16.0),
                            decoration: BoxDecoration(
                              gradient: const LinearGradient(
                                colors: [Colors.blue, Colors.lightBlueAccent],
                                begin: Alignment.topLeft,
                                end: Alignment.bottomRight,
                              ),
                              borderRadius: BorderRadius.circular(20.0),
                              boxShadow: [
                                BoxShadow(
                                  color: Colors.blue.withOpacity(0.3), blurRadius: 4,
                                  offset: const Offset(0, 2),
                                ),
                              ],
                            ),
                            child: Text(
                              dayLabel,
                              style: const TextStyle(
                                fontSize: 14.0, fontWeight: FontWeight.bold, color: Colors.white,
                              ),
                              textAlign: TextAlign.center,
                            ),
                          ),
                        ),
                        // Lista de notificações para o dia
                        ...notificationsForDay.map((notificationData) {
                          final notification = notificationData['notification'] as Map<String, dynamic>;
                          final notificationId = notificationData['id'] as String;
                          final notificationType = notification['notificationType'] ?? 'Padrão';

                          // Determinar ícone e cor
                          IconData iconData;
                          Color iconColor;
                          switch (notificationType) {
                            case 'Order':
                              iconData = Icons.add_box;
                              iconColor = const Color.fromARGB(255, 25, 105, 170);
                              break;
                            case 'Update':
                              iconData = Icons.inventory_2;
                              iconColor = const Color.fromARGB(255, 23, 143, 27);
                              break;
                            case 'Transfer':
                              iconData = Icons.swap_horiz;
                              iconColor = const Color.fromARGB(255, 131, 6, 153);
                              break;
                            case 'UpdatePrice':
                              iconData = Icons.attach_money;
                              iconColor = const Color.fromARGB(255, 255, 115, 0);
                              break;
                            case 'Create':
                              iconData = Icons.fiber_new;
                              iconColor = Colors.black;
                              break;
                            case 'Edit':
                              iconData = Icons.edit;
                              iconColor = const Color.fromARGB(255, 221, 199, 0);
                              break;
                            case 'Meeting':
                              iconData = Icons.timelapse_sharp;
                              iconColor = const Color.fromARGB(255, 3, 12, 138);
                              break;
                            case 'Warning':
                              iconData = Icons.warning;
                              iconColor = const Color.fromARGB(255, 141, 128, 9);
                              break;
                            case 'Schedule':
                              iconData = Icons.schedule;
                              iconColor = const Color.fromARGB(255, 0, 0, 0);
                              break;
                            default:
                              iconData = Icons.notification_important;
                              iconColor = Colors.red;
                              break;
                          }
                          return Padding(
                            padding: const EdgeInsets.symmetric(horizontal: 12.0, vertical: 8.0),
                            child: MouseRegion(
                              cursor: SystemMouseCursors.click,
                              child: GestureDetector(
                                onTap: () {
                                  final notificationId = notification['notificationId'] ?? '';
                                  final productId = notification['productId'] ?? '';
                                  final message = notification['message'] ?? 'No message';

                                  _showNotificationDetails(context, productId, message, notificationId);
                                },
                                child: Container(
                                  decoration: BoxDecoration(
                                    gradient: const LinearGradient(
                                      colors: [Colors.white, Colors.white],
                                      begin: Alignment.topLeft,
                                      end: Alignment.bottomRight,
                                    ),
                                    borderRadius: BorderRadius.circular(12),
                                    boxShadow: [
                                      BoxShadow(
                                        color: Colors.grey.withOpacity(0.1),
                                        blurRadius: 6,
                                        offset: const Offset(0, 3),
                                      ),
                                    ],
                                  ),
                                  child: ClipRRect(
                                    borderRadius: BorderRadius.circular(12),
                                    child: BackdropFilter(
                                      filter: ImageFilter.blur(sigmaX: 1.0, sigmaY: 1.5),
                                      child: Padding(
                                        padding: const EdgeInsets.all(16.0),
                                        child: Row(
                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                          children: [
                                            Expanded(
                                              child: Column(
                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                children: [
                                                  Text(
                                                    notification['message'] ?? 'Sem mensagem',
                                                    style: const TextStyle(
                                                      fontSize: 14.0,
                                                      fontWeight: FontWeight.bold,
                                                      color: Colors.black,
                                                    ),
                                                  ),
                                                  const SizedBox(height: 8.0),
                                                  Text(
                                                    notification['timestamp'] != null
                                                        ? _formatTimeElapsed((notification['timestamp'] as Timestamp).toDate())
                                                        : 'Sem data',
                                                    style: const TextStyle(
                                                      fontSize: 12.0,
                                                      color: Colors.black54,
                                                    ),
                                                  ),
                                                  const SizedBox(height: 8.0),
                                                  Row(
                                                    children: [
                                                      Icon(iconData, color: iconColor, size: 18.0),
                                                      const SizedBox(width: 8.0),
                                                      Text(
                                                        notificationType,
                                                        style: const TextStyle(
                                                          fontSize: 12.0,
                                                          fontStyle: FontStyle.italic,
                                                          color: Colors.black87,
                                                        ),
                                                      ),
                                                    ],
                                                  ),
                                                ],
                                              ),
                                            ),
                                            IconButton(
                                              icon: const Icon(Icons.delete, color: Colors.red),
                                              onPressed: () {
                                                _confirmDelete(context, notificationId);
                                              },
                                            ),
                                          ],
                                        ),
                                      ),
                                    ),
                                  ),
                                ),
                              ),
                            ),
                          );
                        }).toList(),
                      ],
                    );
                  }).toList(),
                );
              },
            );
          },
        ),
      ),
    );
  }

  // Função para excluir notificações expiradas
  Future<void> _deleteExpiredNotifications(String storeNumber) async {
    try {
      final now = DateTime.now();
      final threeDaysAgo = now.subtract(Duration(days: 3));

      // Busca notificações com mais de 3 dias
      final expiredNotifications = await FirebaseFirestore.instance
          .collection('notifications')
          .where('storeNumber', isEqualTo: storeNumber)
          .where('timestamp', isLessThan: Timestamp.fromDate(threeDaysAgo))
          .get();

      // Exclui cada notificação expirada
      for (final doc in expiredNotifications.docs) {
        await doc.reference.delete();
      }

      debugPrint("Deleted ${expiredNotifications.docs.length} expired notifications.");
    } catch (e) {
      // debugPrint("Error deleting expired notifications: $e");
    }
  }

void _showSendNotificationModal(BuildContext context) {
  final messageController = TextEditingController();
  String selectedCategory = ''; // Categoria inicialmente não selecionada

  showDialog(
    context: context,
    builder: (context) {
      return AlertDialog(
        title: const Text('Send Administrative Message'),
        content: StatefulBuilder(
          builder: (context, setState) {
            return Column(
              mainAxisSize: MainAxisSize.min, // Para garantir que o conteúdo ocupe o espaço mínimo necessário
              children: [
                // Campo para a mensagem
                TextField(
                  controller: messageController,
                  decoration: const InputDecoration(
                    hintText: 'Type your message',  // Dica para o usuário
                    contentPadding: EdgeInsets.symmetric(vertical: 12.0, horizontal: 16.0), // Ajuste de espaçamento
                    border: OutlineInputBorder(), // Definindo a borda do campo
                  ),
                  maxLines: 3,  // Permite 3 linhas no campo
                  textInputAction: TextInputAction.done,
                ),
                const SizedBox(height: 10),
                // Lista de categorias
                const Text('Choose the notification category:'),
                DropdownButton<String>(
                  value: selectedCategory.isEmpty ? null : selectedCategory, // Definir o valor selecionado
                  hint: const Text('Choose Category'),  // Texto inicial
                  items: const [
                    DropdownMenuItem(value: 'Schedule', child: Text('Schedule')),
                    DropdownMenuItem(value: 'Warning', child: Text('Warning')),
                    DropdownMenuItem(value: 'Meeting', child: Text('Meeting')),
                  ],
                  onChanged: (value) {
                    if (value != null) {
                      setState(() {
                        selectedCategory = value; // Atualiza a categoria selecionada
                      });
                    }
                  },
                ),
              ],
            );
          },
        ),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.pop(context);
            },
            child: const Text('Close'),
          ),
          TextButton(
            onPressed: () {
              if (messageController.text.length < 5 || selectedCategory.isEmpty) {
                // Verificação de mensagem e categoria
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('Message must have at least 5 characters and a category must be chosen.')),
                );
              } else {
                _sendAdminNotification(messageController.text, selectedCategory);
                Navigator.pop(context);
              }
            },
            child: Text(
              'Send',
              style: TextStyle(fontWeight: FontWeight.bold),  // Botão "Enviar" em negrito
            ),
          ),
        ],
      );
    },
  );
}

Future<void> _sendAdminNotification(String message, String notificationType) async {
  final user = FirebaseAuth.instance.currentUser;
    if (user == null) return;
    
  final notificationId = FirebaseFirestore.instance.collection('notifications').doc().id;
  final storeNumber = await _getUserStoreNumber();  // Recupera o número da loja
  
  await FirebaseFirestore.instance.collection('notifications').add({
    'message': message,
    'notificationId': notificationId,
    'notificationType': notificationType,  // Incluindo o tipo selecionado
    'storeNumber': storeNumber,
    'timestamp': FieldValue.serverTimestamp(),
    'userId': user.uid,
  });
}

  bool _isToday(DateTime dateTime) { // Métodos auxiliares
    final now = DateTime.now();
    return dateTime.year == now.year && dateTime.month == now.month && dateTime.day == now.day;
  }

  bool _isYesterday(DateTime dateTime) {
    final yesterday = DateTime.now().subtract(Duration(days: 1));
    return dateTime.year == yesterday.year &&
        dateTime.month == yesterday.month &&
        dateTime.day == yesterday.day;
  }

  String _formatDate(DateTime dateTime) {
    return "${dateTime.day}/${dateTime.month}/${dateTime.year}";
  }

  void _confirmDelete(BuildContext context, String notificationId) {
  showDialog( // Primeiro alerta de confirmação
    context: context,
    builder: (context) {
      return AlertDialog(
        title: Text("Confirm Delete"),
        content: Text(
          "Are you sure you want to delete this notification? This action cannot be undone.",
        ),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.of(context).pop(); // Fecha o primeiro alerta
            },
            child: Text("Cancel"),
          ),
          TextButton(
            onPressed: () {
              Navigator.of(context).pop(); // Fecha o primeiro alerta

              showDialog( // Segundo alerta de confirmação
                context: context,
                builder: (context) {
                  return AlertDialog(
                    title: Text("Confirm Again"),
                    content: Text(
                      "This is your last chance to cancel. Do you really want to delete this notification?",
                    ),
                    actions: [
                      TextButton(
                        onPressed: () {
                          Navigator.of(context).pop(); // Fecha o segundo alerta
                        },
                        child: Text("Cancel"),
                      ),
                      TextButton(
                        onPressed: () async {
                          Navigator.of(context).pop(); // Fecha o segundo alerta

                          try { // Realiza a exclusão
                            await FirebaseFirestore.instance
                                .collection('notifications')
                                .doc(notificationId)
                                .delete();

                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(
                                content: Text("Notification deleted successfully."),
                              ),
                            );
                          } catch (e) {
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(
                                content: Text("Error deleting notification."),
                              ),
                            );
                          }
                        },
                        child: Text("Delete", style: TextStyle(fontWeight: FontWeight.bold),),
                      ),
                    ],
                  );
                },
              );
            },
            child: Text("Continue", style: TextStyle(fontWeight: FontWeight.bold),),
          ),
        ],
      );
    },
  );
}

void _showNotificationDetails(BuildContext context, String productId, String message, String notificationId) async {
  try {
    // Adiciona log para verificar os valores de productId e notificationId
    // debugPrint("Fetching details for productId: '$productId' and notificationId: '$notificationId'");
    // Busca o documento do produto no Firestore
    final productSnapshot = await FirebaseFirestore.instance.collection('products').doc(productId).get();

    // Verifica se o produto foi encontrado
    if (!productSnapshot.exists) {
      throw Exception("Product not found");
    }

    // Obtém os detalhes do produto
    final productName = productSnapshot['name'] ?? 'Unknown Product';
    final productBrand = productSnapshot['brand'] ?? 'Unknown Brand';
    final productModel = productSnapshot['model'] ?? 'Unknown Model';
    final productSalePrice = productSnapshot['salePrice'] != null
        ? "\$${productSnapshot['salePrice']}"
        : 'Price not available';

    // Busca o documento da notificação usando o ID correto da notificação
    final notificationSnapshot = await FirebaseFirestore.instance
        .collection('notifications')
        .doc(notificationId)
        .get();
    
    // Verifica se a notificação foi encontrada
    if (!notificationSnapshot.exists) {
      throw Exception("Notification not found");
    }

    String notificationTimestamp;
    final timestamp = notificationSnapshot['timestamp'];

    // Verifica se o timestamp é válido e do tipo Timestamp
    if (timestamp != null && timestamp is Timestamp) {
      // Converte o timestamp para uma data local
      final date = timestamp.toDate();
      final localDate = date.toLocal(); // Converte para horário local

      // Formata a data no formato desejado (dd/MM/yyyy HH:mm)
      notificationTimestamp = DateFormat('dd/MM/yyyy HH:mm').format(localDate);
    } else {
      notificationTimestamp = 'Invalid timestamp format';
    }

    showDialog( // Exibe os detalhes em um diálogo
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text("Notification Details"),
          content: SingleChildScrollView(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // Exibe o campo Product Name e o nome do produto na mesma linha
                Row(
                  children: [
                    Text("Product Name: ", style: TextStyle(fontWeight: FontWeight.bold)),
                    Text(productName),
                  ],
                ),
                SizedBox(height: 8.0), // Espaçamento entre os campos

                // Exibe o campo Brand
                Row(
                  children: [
                    Text("Brand: ", style: TextStyle(fontWeight: FontWeight.bold)),
                    Text(productBrand),
                  ],
                ),
                SizedBox(height: 8.0), // Espaçamento entre os campos

                // Exibe o campo Model
                Row(
                  children: [
                    Text("Model: ", style: TextStyle(fontWeight: FontWeight.bold)),
                    Text(productModel),
                  ],
                ),
                SizedBox(height: 8.0), // Espaçamento entre os campos

                // Exibe o campo Sale Price
                Row(
                  children: [
                    Text("Sale Price: ", style: TextStyle(fontWeight: FontWeight.bold)),
                    Text(productSalePrice),
                  ],
                ),
                SizedBox(height: 8.0), // Espaçamento entre os campos

                // Exibe o campo Notification Timestamp
                Row(
                  children: [
                    Text("Notification Sent At: ", style: TextStyle(fontWeight: FontWeight.bold)),
                    Text(notificationTimestamp, style: TextStyle(color: Colors.blue[700])), // Estilo para o timestamp
                  ],
                ),
                SizedBox(height: 12.0), // Espaçamento antes da mensagem

                // Exibe o campo Message
                Row(
                  children: [
                    Text("Message: ", style: TextStyle(fontWeight: FontWeight.bold)),
                    Expanded(
                      child: Text(message, style: TextStyle(color: Colors.grey[700]))),
                  ],
                ),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: Text("Close"),
            ),
          ],
        );
      },
    );
  } catch (e) {}
}

  // Função para pegar o número da loja do usuário
  Future<String?> _getUserStoreNumber() async {
    try {
      final user = FirebaseAuth.instance.currentUser;
      if (user == null) return null;

      final userDoc = await FirebaseFirestore.instance
          .collection('users')
          .doc(user.uid)
          .get();

      final storeNumber = userDoc.data()?['storeNumber'] as String?;
      return storeNumber;
    } catch (e) {
      debugPrint("Error fetching user storeNumber: $e");
      throw e;
    }
  }

  Map<String, List<Map<String, dynamic>>> _groupNotificationsByDay(List<DocumentSnapshot> notifications) {
    final Map<String, List<Map<String, dynamic>>> groupedNotifications = {};

    for (final doc in notifications) {
      final data = doc.data() as Map<String, dynamic>;
      final timestamp = data['timestamp'] as Timestamp?;
      if (timestamp == null) continue;

      final dateTime = timestamp.toDate();
      String dayLabel;

      if (_isToday(dateTime)) {
        dayLabel = "Today - ${_formatDate(dateTime)}";
      } else if (_isYesterday(dateTime)) {
        dayLabel = "Yesterday - ${_formatDate(dateTime)}";
      } else {
        dayLabel = _formatDate(dateTime);
      }

      groupedNotifications.putIfAbsent(dayLabel, () => []).add({
        'id': doc.id,
        'notification': data,
      });
    }
    return groupedNotifications;
  }
}